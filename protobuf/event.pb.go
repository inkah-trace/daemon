// Code generated by protoc-gen-go.
// source: event.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	Event
	ForwardedEvent
	EventResponse
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_SPAN_BEGIN    EventType = 0
	EventType_SPAN_END      EventType = 1
	EventType_REQUEST_BEGIN EventType = 2
	EventType_REQUEST_END   EventType = 3
)

var EventType_name = map[int32]string{
	0: "SPAN_BEGIN",
	1: "SPAN_END",
	2: "REQUEST_BEGIN",
	3: "REQUEST_END",
}
var EventType_value = map[string]int32{
	"SPAN_BEGIN":    0,
	"SPAN_END":      1,
	"REQUEST_BEGIN": 2,
	"REQUEST_END":   3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event struct {
	TraceId      string    `protobuf:"bytes,1,opt,name=traceId" json:"traceId,omitempty"`
	SpanId       string    `protobuf:"bytes,2,opt,name=spanId" json:"spanId,omitempty"`
	ParentSpanId string    `protobuf:"bytes,3,opt,name=parentSpanId" json:"parentSpanId,omitempty"`
	RequestId    string    `protobuf:"bytes,4,opt,name=requestId" json:"requestId,omitempty"`
	EventType    EventType `protobuf:"varint,5,opt,name=eventType,enum=inkah.EventType" json:"eventType,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *Event) GetSpanId() string {
	if m != nil {
		return m.SpanId
	}
	return ""
}

func (m *Event) GetParentSpanId() string {
	if m != nil {
		return m.ParentSpanId
	}
	return ""
}

func (m *Event) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *Event) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_SPAN_BEGIN
}

type ForwardedEvent struct {
	TraceId      string    `protobuf:"bytes,1,opt,name=traceId" json:"traceId,omitempty"`
	SpanId       string    `protobuf:"bytes,2,opt,name=spanId" json:"spanId,omitempty"`
	ParentSpanId string    `protobuf:"bytes,3,opt,name=parentSpanId" json:"parentSpanId,omitempty"`
	RequestId    string    `protobuf:"bytes,4,opt,name=requestId" json:"requestId,omitempty"`
	Hostname     string    `protobuf:"bytes,5,opt,name=hostname" json:"hostname,omitempty"`
	Timestamp    int64     `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	EventType    EventType `protobuf:"varint,7,opt,name=eventType,enum=inkah.EventType" json:"eventType,omitempty"`
}

func (m *ForwardedEvent) Reset()                    { *m = ForwardedEvent{} }
func (m *ForwardedEvent) String() string            { return proto.CompactTextString(m) }
func (*ForwardedEvent) ProtoMessage()               {}
func (*ForwardedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ForwardedEvent) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *ForwardedEvent) GetSpanId() string {
	if m != nil {
		return m.SpanId
	}
	return ""
}

func (m *ForwardedEvent) GetParentSpanId() string {
	if m != nil {
		return m.ParentSpanId
	}
	return ""
}

func (m *ForwardedEvent) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ForwardedEvent) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ForwardedEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ForwardedEvent) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_SPAN_BEGIN
}

type EventResponse struct {
}

func (m *EventResponse) Reset()                    { *m = EventResponse{} }
func (m *EventResponse) String() string            { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()               {}
func (*EventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Event)(nil), "inkah.Event")
	proto.RegisterType((*ForwardedEvent)(nil), "inkah.ForwardedEvent")
	proto.RegisterType((*EventResponse)(nil), "inkah.EventResponse")
	proto.RegisterEnum("inkah.EventType", EventType_name, EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Inkah service

type InkahClient interface {
	RegisterEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventResponse, error)
}

type inkahClient struct {
	cc *grpc.ClientConn
}

func NewInkahClient(cc *grpc.ClientConn) InkahClient {
	return &inkahClient{cc}
}

func (c *inkahClient) RegisterEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := grpc.Invoke(ctx, "/inkah.Inkah/RegisterEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Inkah service

type InkahServer interface {
	RegisterEvent(context.Context, *Event) (*EventResponse, error)
}

func RegisterInkahServer(s *grpc.Server, srv InkahServer) {
	s.RegisterService(&_Inkah_serviceDesc, srv)
}

func _Inkah_RegisterEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InkahServer).RegisterEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inkah.Inkah/RegisterEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InkahServer).RegisterEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inkah_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inkah.Inkah",
	HandlerType: (*InkahServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEvent",
			Handler:    _Inkah_RegisterEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0x4f, 0x4f, 0xc2, 0x30,
	0x18, 0xc6, 0x29, 0x38, 0x60, 0x2f, 0x7f, 0x6d, 0x8c, 0x59, 0x88, 0x07, 0xb2, 0x13, 0xf1, 0xb0,
	0x03, 0xc6, 0xab, 0x89, 0xc4, 0x6a, 0x76, 0x90, 0x68, 0xc1, 0x8b, 0x17, 0x53, 0xdc, 0xab, 0x10,
	0x43, 0x57, 0xdb, 0xa2, 0xf1, 0x33, 0xf9, 0xdd, 0xfc, 0x0c, 0x66, 0x85, 0x31, 0x38, 0x79, 0xf4,
	0xb6, 0xe7, 0xf7, 0x3e, 0x4b, 0x7f, 0x6f, 0x53, 0x68, 0xe0, 0x07, 0x4a, 0x1b, 0x29, 0x9d, 0xda,
	0x94, 0x7a, 0x0b, 0xf9, 0x26, 0xe6, 0xe1, 0x37, 0x01, 0x8f, 0x65, 0x98, 0x06, 0x50, 0xb3, 0x5a,
	0x3c, 0x63, 0x9c, 0x04, 0xa4, 0x4f, 0x06, 0x3e, 0xcf, 0x23, 0x3d, 0x86, 0xaa, 0x51, 0x42, 0xc6,
	0x49, 0x50, 0x76, 0x83, 0x4d, 0xa2, 0x21, 0x34, 0x95, 0xd0, 0x28, 0xed, 0x64, 0x3d, 0xad, 0xb8,
	0xe9, 0x1e, 0xa3, 0x27, 0xe0, 0x6b, 0x7c, 0x5f, 0xa1, 0xb1, 0x71, 0x12, 0x1c, 0xb8, 0x42, 0x01,
	0x68, 0x04, 0xbe, 0x73, 0x9a, 0x7e, 0x29, 0x0c, 0xbc, 0x3e, 0x19, 0xb4, 0x87, 0xdd, 0xc8, 0x89,
	0x45, 0x2c, 0xe7, 0xbc, 0xa8, 0x84, 0x3f, 0x04, 0xda, 0xd7, 0xa9, 0xfe, 0x14, 0x3a, 0xc1, 0xe4,
	0xff, 0xb4, 0x7b, 0x50, 0x9f, 0xa7, 0xc6, 0x4a, 0xb1, 0x5c, 0x5b, 0xfb, 0x7c, 0x9b, 0xb3, 0x3f,
	0xed, 0x62, 0x89, 0xc6, 0x8a, 0xa5, 0x0a, 0xaa, 0x7d, 0x32, 0xa8, 0xf0, 0x02, 0xec, 0x2f, 0x5c,
	0xfb, 0x7b, 0xe1, 0x0e, 0xb4, 0x1c, 0xe7, 0x68, 0x54, 0x2a, 0x0d, 0x9e, 0xde, 0x82, 0xbf, 0x2d,
	0xd2, 0x36, 0xc0, 0xe4, 0xee, 0x72, 0xfc, 0x34, 0x62, 0x37, 0xf1, 0xb8, 0x5b, 0xa2, 0x4d, 0xa8,
	0xbb, 0xcc, 0xc6, 0x57, 0x5d, 0x42, 0x0f, 0xa1, 0xc5, 0xd9, 0xfd, 0x03, 0x9b, 0x4c, 0x37, 0x85,
	0x32, 0xed, 0x40, 0x23, 0x47, 0x59, 0xa7, 0x32, 0xbc, 0x00, 0x2f, 0xce, 0x4e, 0xa7, 0xe7, 0xd0,
	0xe2, 0xf8, 0xba, 0x30, 0x16, 0xf5, 0xfa, 0x5e, 0x9b, 0xbb, 0x5a, 0xbd, 0xa3, 0xdd, 0x94, 0xcb,
	0x84, 0xa5, 0x11, 0x3c, 0xd6, 0xdd, 0x73, 0x9a, 0xad, 0x5e, 0x66, 0x55, 0xf7, 0x75, 0xf6, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0x18, 0xcb, 0x9e, 0x67, 0x02, 0x00, 0x00,
}
